from urllib.request import urlopen as uReq
from bs4 import BeautifulSoup as soup
import time

my_url = 'https://www.basketball-reference.com/leagues/NBA_2016_games.html'
uClient = uReq(my_url)
page_html = uClient.read()
uClient.close()

page_soup = soup(page_html, "html.parser")
containers = page_soup.findAll("tr")
del containers[0]
container = containers[0]

month_container = page_soup.findAll("div", {"class":"filter"})
month_container_list = month_container[0].findAll("div")
month = month_container_list[0].text.strip()
month_holder = month_container_list[0]
for a in month_holder.findAll("a", href = True):month_link = (a["href"])
full_month_link = "https://www.basketball-reference.com" + month_link

for x in month_container_list:
    month = x.text.strip()
    month_holder = x
    for a in month_holder.findAll("a", href = True):month_link = (a["href"])
    full_month_link = "https://www.basketball-reference.com" + month_link

    my_url = full_month_link
    uClient = uReq(my_url)
    page_html = uClient.read()
    uClient.close()
    
    page_soup = soup(page_html, "html.parser")
    containers = page_soup.findAll("tr")
    del containers[0]
    container = containers[0]
    
    time.sleep(5)


    for container in containers:
        
        # containers = entire months table
        # container = one row in that table
        
        box_score_container = container.findAll("td", {"data-stat":"box_score_text"})[0]
        for link in box_score_container:
            foul_page_link = (link.get("href"))
        
        # this gets us the link to the play-by-play page
        full_foul_page_link = "https://www.basketball-reference.com/boxscores/pbp/" + foul_page_link[-17:]
        
        # this makes the pbp page readable
        foul_page_url = full_foul_page_link
        foulClient = uReq(foul_page_url)
        foul_page_html = foulClient.read()
        foulClient.close()
        foul_page_soup = soup(foul_page_html, "html.parser")
        
        # creates a file with the unique name used to find the pbp page
        filename = foul_page_link[-17:-5] + '.csv'
        f = open(filename, "w")
        headers = "date, v_name, v_points, h_name, h_points, ovt, foul_team, foul_type, foul_by, foul_drawn, foul_quarter, foul_score\n"
        f.write(headers)
        
        date_container = container.findAll("th", {"data-stat":"date_game"})
        date = date_container[0].text
        
        vistor_container = container.findAll("td", {"data-stat":"visitor_team_name"})
        v_name = vistor_container[0].text
        
        vistor_pts_container = container.findAll("td", {"data-stat":"visitor_pts"})
        v_pts = vistor_pts_container[0].text
        
        home_name_container = container.findAll("td", {"data-stat":"home_team_name"})
        h_name = home_name_container[0].text
        
        home_pts_container = container.findAll("td", {"data-stat":"home_pts"})
        h_pts = home_pts_container[0].text
        
        overtime_container = container.findAll("td", {"data-stat":"overtimes"})
        ovt = overtime_container[0].text
        
        # gives us the table of fouls in pbp page
        table = foul_page_soup.find('table')
        foul_table = table.findAll('tr')
        
        # gives list rows which contain a foul or quarter marker
        foul_list = []
        for i in foul_table:
            if 'foul' in i.text or 'quarter' in i.text:
                foul_list.append(i.text)
    
        foul_type = []
        foul_drawn = []
        foul_by = []
        foul_team = []
        foul_score = []
        foul_time = []
        foul_quarter = []
        foul_quarter_holder = []
        
        for i in range(0, len(foul_list)):
            if 'quarter' in foul_list[i]:
                    foul_quarter_holder.append(i)
    
        for i in range(0, len(foul_list)):
            foul_list_split = foul_list[i].replace('\n', ' ').split()
            for j in foul_list_split:
                if j == 'foul':
                    x = foul_list_split.index(j)
                    y = x - 1
                    foul_type = foul_list_split[y]
            for k in foul_list_split:
                if k == '(drawn':
                    x = foul_list_split.index(k)
                    y = x + 2
                    z = x + 3
                    foul_drawn = foul_list_split[y] + ' ' + foul_list_split[z]
                    foul_drawn = foul_drawn.replace(')', '')
                    break
                else:
                    foul_drawn = 'NA'
            for l in foul_list_split:
                if l == 'foul' or l == 'foul)':
                    if 'Team' in foul_list[i].replace('\n', ' ').split():
                        foul_by = 'Team'
                    else:
                        x = foul_list_split.index(l)
                        if (len(foul_list_split) - (x + 1)) <= 1:
                            foul_by = foul_list_split[3] + ' ' + foul_list_split[4]
                        else:
                            y = x + 2
                            z = x + 3
                            foul_by = foul_list_split[y] + ' ' + foul_list_split[z]
            if any(char.isdigit() for char in foul_list_split[1]):
                if 'quarter' in foul_list[i]:
                    continue
                foul_team = v_name
                foul_score = foul_list_split[1]
            else:
                if 'quarter' in foul_list[i]:
                    continue
                foul_team = h_name
                foul_score = foul_list_split[-1]
                foul_time = foul_list_split[0][0:4]
            if foul_quarter_holder[0] <= i and i < foul_quarter_holder[1]:
                foul_quarter = '1st quarter'
            if foul_quarter_holder[2] <= i and i < foul_quarter_holder[3]:
                foul_quarter = '2nd quarter'
            if foul_quarter_holder[4] <= i and i < foul_quarter_holder[5]:
                foul_quarter = '3rd quarter'
            if foul_quarter_holder[6] <= i and i < foul_quarter_holder[7]:
                foul_quarter = '4th quarter'
            f.write(date.replace(",", "") + "," + v_name + "," + v_pts + "," + h_name + "," + h_pts + "," + ovt + ","  +  foul_team + "," + foul_type + "," + foul_by + "," + foul_drawn + "," + foul_quarter + "," + foul_score + "," + "\n")   
        
        time.sleep(5)

f.close()
